// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: fdu.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DefineFDURequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *DefineFDURequest) Reset() {
	*x = DefineFDURequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdu_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefineFDURequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefineFDURequest) ProtoMessage() {}

func (x *DefineFDURequest) ProtoReflect() protoreflect.Message {
	mi := &file_fdu_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefineFDURequest.ProtoReflect.Descriptor instead.
func (*DefineFDURequest) Descriptor() ([]byte, []int) {
	return file_fdu_proto_rawDescGZIP(), []int{0}
}

func (x *DefineFDURequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Latitude  string  `protobuf:"bytes,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longiture string  `protobuf:"bytes,2,opt,name=longiture,proto3" json:"longiture,omitempty"`
	Radius    float64 `protobuf:"fixed64,3,opt,name=radius,proto3" json:"radius,omitempty"`
}

func (x *Position) Reset() {
	*x = Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdu_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position) ProtoMessage() {}

func (x *Position) ProtoReflect() protoreflect.Message {
	mi := &file_fdu_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position.ProtoReflect.Descriptor instead.
func (*Position) Descriptor() ([]byte, []int) {
	return file_fdu_proto_rawDescGZIP(), []int{1}
}

func (x *Position) GetLatitude() string {
	if x != nil {
		return x.Latitude
	}
	return ""
}

func (x *Position) GetLongiture() string {
	if x != nil {
		return x.Longiture
	}
	return ""
}

func (x *Position) GetRadius() float64 {
	if x != nil {
		return x.Radius
	}
	return 0
}

type Proximity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Neighbor string  `protobuf:"bytes,1,opt,name=neighbor,proto3" json:"neighbor,omitempty"`
	Radius   float64 `protobuf:"fixed64,2,opt,name=radius,proto3" json:"radius,omitempty"`
}

func (x *Proximity) Reset() {
	*x = Proximity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdu_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proximity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proximity) ProtoMessage() {}

func (x *Proximity) ProtoReflect() protoreflect.Message {
	mi := &file_fdu_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proximity.ProtoReflect.Descriptor instead.
func (*Proximity) Descriptor() ([]byte, []int) {
	return file_fdu_proto_rawDescGZIP(), []int{2}
}

func (x *Proximity) GetNeighbor() string {
	if x != nil {
		return x.Neighbor
	}
	return ""
}

func (x *Proximity) GetRadius() float64 {
	if x != nil {
		return x.Radius
	}
	return 0
}

type Configuration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfType string `protobuf:"bytes,1,opt,name=conf_type,json=confType,proto3" json:"conf_type,omitempty"`
	Script   string `protobuf:"bytes,2,opt,name=script,proto3" json:"script,omitempty"`
	SshKeys  string `protobuf:"bytes,3,opt,name=ssh_keys,json=sshKeys,proto3" json:"ssh_keys,omitempty"`
}

func (x *Configuration) Reset() {
	*x = Configuration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdu_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Configuration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Configuration) ProtoMessage() {}

func (x *Configuration) ProtoReflect() protoreflect.Message {
	mi := &file_fdu_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Configuration.ProtoReflect.Descriptor instead.
func (*Configuration) Descriptor() ([]byte, []int) {
	return file_fdu_proto_rawDescGZIP(), []int{3}
}

func (x *Configuration) GetConfType() string {
	if x != nil {
		return x.ConfType
	}
	return ""
}

func (x *Configuration) GetScript() string {
	if x != nil {
		return x.Script
	}
	return ""
}

func (x *Configuration) GetSshKeys() string {
	if x != nil {
		return x.SshKeys
	}
	return ""
}

type Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid     string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Uri      string `protobuf:"bytes,3,opt,name=uri,proto3" json:"uri,omitempty"`
	Checksum string `protobuf:"bytes,4,opt,name=checksum,proto3" json:"checksum,omitempty"`
	Format   string `protobuf:"bytes,5,opt,name=format,proto3" json:"format,omitempty"`
}

func (x *Image) Reset() {
	*x = Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdu_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Image) ProtoMessage() {}

func (x *Image) ProtoReflect() protoreflect.Message {
	mi := &file_fdu_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Image.ProtoReflect.Descriptor instead.
func (*Image) Descriptor() ([]byte, []int) {
	return file_fdu_proto_rawDescGZIP(), []int{4}
}

func (x *Image) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Image) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Image) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *Image) GetChecksum() string {
	if x != nil {
		return x.Checksum
	}
	return ""
}

func (x *Image) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

type ComputationalRequirements struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CpuArch         string `protobuf:"bytes,1,opt,name=cpu_arch,json=cpuArch,proto3" json:"cpu_arch,omitempty"`
	CpuMinFrequency uint64 `protobuf:"varint,2,opt,name=cpu_min_frequency,json=cpuMinFrequency,proto3" json:"cpu_min_frequency,omitempty"`
	CpuMinCount     uint32 `protobuf:"varint,3,opt,name=cpu_min_count,json=cpuMinCount,proto3" json:"cpu_min_count,omitempty"`
	GpuMinCount     uint32 `protobuf:"varint,4,opt,name=gpu_min_count,json=gpuMinCount,proto3" json:"gpu_min_count,omitempty"`
	FpgaMinCount    uint32 `protobuf:"varint,5,opt,name=fpga_min_count,json=fpgaMinCount,proto3" json:"fpga_min_count,omitempty"`
	OperatingSystem string `protobuf:"bytes,6,opt,name=operating_system,json=operatingSystem,proto3" json:"operating_system,omitempty"`
	RamSizeMb       uint32 `protobuf:"varint,7,opt,name=ram_size_mb,json=ramSizeMb,proto3" json:"ram_size_mb,omitempty"`
	StrogateSizeMb  uint32 `protobuf:"varint,8,opt,name=strogate_size_mb,json=strogateSizeMb,proto3" json:"strogate_size_mb,omitempty"`
}

func (x *ComputationalRequirements) Reset() {
	*x = ComputationalRequirements{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdu_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComputationalRequirements) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputationalRequirements) ProtoMessage() {}

func (x *ComputationalRequirements) ProtoReflect() protoreflect.Message {
	mi := &file_fdu_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputationalRequirements.ProtoReflect.Descriptor instead.
func (*ComputationalRequirements) Descriptor() ([]byte, []int) {
	return file_fdu_proto_rawDescGZIP(), []int{5}
}

func (x *ComputationalRequirements) GetCpuArch() string {
	if x != nil {
		return x.CpuArch
	}
	return ""
}

func (x *ComputationalRequirements) GetCpuMinFrequency() uint64 {
	if x != nil {
		return x.CpuMinFrequency
	}
	return 0
}

func (x *ComputationalRequirements) GetCpuMinCount() uint32 {
	if x != nil {
		return x.CpuMinCount
	}
	return 0
}

func (x *ComputationalRequirements) GetGpuMinCount() uint32 {
	if x != nil {
		return x.GpuMinCount
	}
	return 0
}

func (x *ComputationalRequirements) GetFpgaMinCount() uint32 {
	if x != nil {
		return x.FpgaMinCount
	}
	return 0
}

func (x *ComputationalRequirements) GetOperatingSystem() string {
	if x != nil {
		return x.OperatingSystem
	}
	return ""
}

func (x *ComputationalRequirements) GetRamSizeMb() uint32 {
	if x != nil {
		return x.RamSizeMb
	}
	return 0
}

func (x *ComputationalRequirements) GetStrogateSizeMb() uint32 {
	if x != nil {
		return x.StrogateSizeMb
	}
	return 0
}

type GeographicalRequirements struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position  *Position    `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	Proximity []*Proximity `protobuf:"bytes,2,rep,name=proximity,proto3" json:"proximity,omitempty"`
}

func (x *GeographicalRequirements) Reset() {
	*x = GeographicalRequirements{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdu_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeographicalRequirements) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeographicalRequirements) ProtoMessage() {}

func (x *GeographicalRequirements) ProtoReflect() protoreflect.Message {
	mi := &file_fdu_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeographicalRequirements.ProtoReflect.Descriptor instead.
func (*GeographicalRequirements) Descriptor() ([]byte, []int) {
	return file_fdu_proto_rawDescGZIP(), []int{6}
}

func (x *GeographicalRequirements) GetPosition() *Position {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *GeographicalRequirements) GetProximity() []*Proximity {
	if x != nil {
		return x.Proximity
	}
	return nil
}

type VirtualInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VifKind   string `protobuf:"bytes,1,opt,name=vif_kind,json=vifKind,proto3" json:"vif_kind,omitempty"`
	Parent    string `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
	Bandwidth uint32 `protobuf:"varint,3,opt,name=bandwidth,proto3" json:"bandwidth,omitempty"`
}

func (x *VirtualInterface) Reset() {
	*x = VirtualInterface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdu_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualInterface) ProtoMessage() {}

func (x *VirtualInterface) ProtoReflect() protoreflect.Message {
	mi := &file_fdu_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualInterface.ProtoReflect.Descriptor instead.
func (*VirtualInterface) Descriptor() ([]byte, []int) {
	return file_fdu_proto_rawDescGZIP(), []int{7}
}

func (x *VirtualInterface) GetVifKind() string {
	if x != nil {
		return x.VifKind
	}
	return ""
}

func (x *VirtualInterface) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *VirtualInterface) GetBandwidth() uint32 {
	if x != nil {
		return x.Bandwidth
	}
	return 0
}

type ConnectionPointDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid   string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Id     string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	VldRef string `protobuf:"bytes,4,opt,name=vld_ref,json=vldRef,proto3" json:"vld_ref,omitempty"`
}

func (x *ConnectionPointDescriptor) Reset() {
	*x = ConnectionPointDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdu_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionPointDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionPointDescriptor) ProtoMessage() {}

func (x *ConnectionPointDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_fdu_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionPointDescriptor.ProtoReflect.Descriptor instead.
func (*ConnectionPointDescriptor) Descriptor() ([]byte, []int) {
	return file_fdu_proto_rawDescGZIP(), []int{8}
}

func (x *ConnectionPointDescriptor) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ConnectionPointDescriptor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ConnectionPointDescriptor) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ConnectionPointDescriptor) GetVldRef() string {
	if x != nil {
		return x.VldRef
	}
	return ""
}

type Interface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Kind             string            `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	MacAddress       string            `protobuf:"bytes,3,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	VirtualInterface *VirtualInterface `protobuf:"bytes,4,opt,name=virtual_interface,json=virtualInterface,proto3" json:"virtual_interface,omitempty"`
	CpId             string            `protobuf:"bytes,5,opt,name=cp_id,json=cpId,proto3" json:"cp_id,omitempty"`
}

func (x *Interface) Reset() {
	*x = Interface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdu_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interface) ProtoMessage() {}

func (x *Interface) ProtoReflect() protoreflect.Message {
	mi := &file_fdu_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interface.ProtoReflect.Descriptor instead.
func (*Interface) Descriptor() ([]byte, []int) {
	return file_fdu_proto_rawDescGZIP(), []int{9}
}

func (x *Interface) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Interface) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *Interface) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *Interface) GetVirtualInterface() *VirtualInterface {
	if x != nil {
		return x.VirtualInterface
	}
	return nil
}

func (x *Interface) GetCpId() string {
	if x != nil {
		return x.CpId
	}
	return ""
}

type StorageDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	StorageKind string `protobuf:"bytes,2,opt,name=storage_kind,json=storageKind,proto3" json:"storage_kind,omitempty"`
	Size        uint32 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *StorageDescriptor) Reset() {
	*x = StorageDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdu_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageDescriptor) ProtoMessage() {}

func (x *StorageDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_fdu_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageDescriptor.ProtoReflect.Descriptor instead.
func (*StorageDescriptor) Descriptor() ([]byte, []int) {
	return file_fdu_proto_rawDescGZIP(), []int{10}
}

func (x *StorageDescriptor) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StorageDescriptor) GetStorageKind() string {
	if x != nil {
		return x.StorageKind
	}
	return ""
}

func (x *StorageDescriptor) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

type FDUDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid                     string                       `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Id                       string                       `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Name                     string                       `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Version                  string                       `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	FduVersion               string                       `protobuf:"bytes,5,opt,name=fdu_version,json=fduVersion,proto3" json:"fdu_version,omitempty"`
	Description              string                       `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Hypervisor               string                       `protobuf:"bytes,7,opt,name=hypervisor,proto3" json:"hypervisor,omitempty"`
	Image                    *Image                       `protobuf:"bytes,8,opt,name=image,proto3" json:"image,omitempty"`
	HypervisorSpecific       string                       `protobuf:"bytes,9,opt,name=hypervisor_specific,json=hypervisorSpecific,proto3" json:"hypervisor_specific,omitempty"`
	ComputationRequirements  *ComputationalRequirements   `protobuf:"bytes,10,opt,name=computation_requirements,json=computationRequirements,proto3" json:"computation_requirements,omitempty"`
	GeographicalRequirements *GeographicalRequirements    `protobuf:"bytes,11,opt,name=geographical_requirements,json=geographicalRequirements,proto3" json:"geographical_requirements,omitempty"`
	Interfaces               []*Interface                 `protobuf:"bytes,12,rep,name=interfaces,proto3" json:"interfaces,omitempty"`
	Storage                  []*StorageDescriptor         `protobuf:"bytes,13,rep,name=storage,proto3" json:"storage,omitempty"`
	ConnectionPoints         []*ConnectionPointDescriptor `protobuf:"bytes,14,rep,name=connection_points,json=connectionPoints,proto3" json:"connection_points,omitempty"`
	Configuration            *Configuration               `protobuf:"bytes,15,opt,name=configuration,proto3" json:"configuration,omitempty"`
	MigrationKind            string                       `protobuf:"bytes,16,opt,name=migration_kind,json=migrationKind,proto3" json:"migration_kind,omitempty"`
	Replicas                 uint32                       `protobuf:"varint,17,opt,name=replicas,proto3" json:"replicas,omitempty"`
	DependsOn                []string                     `protobuf:"bytes,18,rep,name=depends_on,json=dependsOn,proto3" json:"depends_on,omitempty"`
}

func (x *FDUDescriptor) Reset() {
	*x = FDUDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdu_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDUDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDUDescriptor) ProtoMessage() {}

func (x *FDUDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_fdu_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDUDescriptor.ProtoReflect.Descriptor instead.
func (*FDUDescriptor) Descriptor() ([]byte, []int) {
	return file_fdu_proto_rawDescGZIP(), []int{11}
}

func (x *FDUDescriptor) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *FDUDescriptor) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FDUDescriptor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FDUDescriptor) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *FDUDescriptor) GetFduVersion() string {
	if x != nil {
		return x.FduVersion
	}
	return ""
}

func (x *FDUDescriptor) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FDUDescriptor) GetHypervisor() string {
	if x != nil {
		return x.Hypervisor
	}
	return ""
}

func (x *FDUDescriptor) GetImage() *Image {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *FDUDescriptor) GetHypervisorSpecific() string {
	if x != nil {
		return x.HypervisorSpecific
	}
	return ""
}

func (x *FDUDescriptor) GetComputationRequirements() *ComputationalRequirements {
	if x != nil {
		return x.ComputationRequirements
	}
	return nil
}

func (x *FDUDescriptor) GetGeographicalRequirements() *GeographicalRequirements {
	if x != nil {
		return x.GeographicalRequirements
	}
	return nil
}

func (x *FDUDescriptor) GetInterfaces() []*Interface {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

func (x *FDUDescriptor) GetStorage() []*StorageDescriptor {
	if x != nil {
		return x.Storage
	}
	return nil
}

func (x *FDUDescriptor) GetConnectionPoints() []*ConnectionPointDescriptor {
	if x != nil {
		return x.ConnectionPoints
	}
	return nil
}

func (x *FDUDescriptor) GetConfiguration() *Configuration {
	if x != nil {
		return x.Configuration
	}
	return nil
}

func (x *FDUDescriptor) GetMigrationKind() string {
	if x != nil {
		return x.MigrationKind
	}
	return ""
}

func (x *FDUDescriptor) GetReplicas() uint32 {
	if x != nil {
		return x.Replicas
	}
	return 0
}

func (x *FDUDescriptor) GetDependsOn() []string {
	if x != nil {
		return x.DependsOn
	}
	return nil
}

type ConnectionPointRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Id   string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ConnectionPointRecord) Reset() {
	*x = ConnectionPointRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdu_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionPointRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionPointRecord) ProtoMessage() {}

func (x *ConnectionPointRecord) ProtoReflect() protoreflect.Message {
	mi := &file_fdu_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionPointRecord.ProtoReflect.Descriptor instead.
func (*ConnectionPointRecord) Descriptor() ([]byte, []int) {
	return file_fdu_proto_rawDescGZIP(), []int{12}
}

func (x *ConnectionPointRecord) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ConnectionPointRecord) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type VirtualInterfaceRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VifKind   string `protobuf:"bytes,1,opt,name=vif_kind,json=vifKind,proto3" json:"vif_kind,omitempty"`
	Bandwidth uint32 `protobuf:"varint,2,opt,name=bandwidth,proto3" json:"bandwidth,omitempty"`
}

func (x *VirtualInterfaceRecord) Reset() {
	*x = VirtualInterfaceRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdu_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualInterfaceRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualInterfaceRecord) ProtoMessage() {}

func (x *VirtualInterfaceRecord) ProtoReflect() protoreflect.Message {
	mi := &file_fdu_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualInterfaceRecord.ProtoReflect.Descriptor instead.
func (*VirtualInterfaceRecord) Descriptor() ([]byte, []int) {
	return file_fdu_proto_rawDescGZIP(), []int{13}
}

func (x *VirtualInterfaceRecord) GetVifKind() string {
	if x != nil {
		return x.VifKind
	}
	return ""
}

func (x *VirtualInterfaceRecord) GetBandwidth() uint32 {
	if x != nil {
		return x.Bandwidth
	}
	return 0
}

type InterfaceRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Kind             string                  `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	MacAddress       string                  `protobuf:"bytes,3,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	VirtualInterface *VirtualInterfaceRecord `protobuf:"bytes,4,opt,name=virtual_interface,json=virtualInterface,proto3" json:"virtual_interface,omitempty"`
	CpUuid           string                  `protobuf:"bytes,5,opt,name=cp_uuid,json=cpUuid,proto3" json:"cp_uuid,omitempty"`
	IntfUuid         string                  `protobuf:"bytes,6,opt,name=intf_uuid,json=intfUuid,proto3" json:"intf_uuid,omitempty"`
}

func (x *InterfaceRecord) Reset() {
	*x = InterfaceRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdu_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceRecord) ProtoMessage() {}

func (x *InterfaceRecord) ProtoReflect() protoreflect.Message {
	mi := &file_fdu_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceRecord.ProtoReflect.Descriptor instead.
func (*InterfaceRecord) Descriptor() ([]byte, []int) {
	return file_fdu_proto_rawDescGZIP(), []int{14}
}

func (x *InterfaceRecord) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InterfaceRecord) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *InterfaceRecord) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *InterfaceRecord) GetVirtualInterface() *VirtualInterfaceRecord {
	if x != nil {
		return x.VirtualInterface
	}
	return nil
}

func (x *InterfaceRecord) GetCpUuid() string {
	if x != nil {
		return x.CpUuid
	}
	return ""
}

func (x *InterfaceRecord) GetIntfUuid() string {
	if x != nil {
		return x.IntfUuid
	}
	return ""
}

type StorageRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid               string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	StorageId          string `protobuf:"bytes,2,opt,name=storage_id,json=storageId,proto3" json:"storage_id,omitempty"`
	StorageType        string `protobuf:"bytes,3,opt,name=storage_type,json=storageType,proto3" json:"storage_type,omitempty"`
	Size               uint32 `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	FileSystemProtocol string `protobuf:"bytes,5,opt,name=file_system_protocol,json=fileSystemProtocol,proto3" json:"file_system_protocol,omitempty"`
	CpId               string `protobuf:"bytes,6,opt,name=cp_id,json=cpId,proto3" json:"cp_id,omitempty"`
}

func (x *StorageRecord) Reset() {
	*x = StorageRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdu_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageRecord) ProtoMessage() {}

func (x *StorageRecord) ProtoReflect() protoreflect.Message {
	mi := &file_fdu_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageRecord.ProtoReflect.Descriptor instead.
func (*StorageRecord) Descriptor() ([]byte, []int) {
	return file_fdu_proto_rawDescGZIP(), []int{15}
}

func (x *StorageRecord) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *StorageRecord) GetStorageId() string {
	if x != nil {
		return x.StorageId
	}
	return ""
}

func (x *StorageRecord) GetStorageType() string {
	if x != nil {
		return x.StorageType
	}
	return ""
}

func (x *StorageRecord) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *StorageRecord) GetFileSystemProtocol() string {
	if x != nil {
		return x.FileSystemProtocol
	}
	return ""
}

func (x *StorageRecord) GetCpId() string {
	if x != nil {
		return x.CpId
	}
	return ""
}

type FDURecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid               string                   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	FduUuid            string                   `protobuf:"bytes,2,opt,name=fdu_uuid,json=fduUuid,proto3" json:"fdu_uuid,omitempty"`
	Node               string                   `protobuf:"bytes,3,opt,name=node,proto3" json:"node,omitempty"`
	Interfaces         []*InterfaceRecord       `protobuf:"bytes,4,rep,name=interfaces,proto3" json:"interfaces,omitempty"`
	ConencitonPoints   []*ConnectionPointRecord `protobuf:"bytes,5,rep,name=conenciton_points,json=conencitonPoints,proto3" json:"conenciton_points,omitempty"`
	Status             string                   `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	Error              string                   `protobuf:"bytes,7,opt,name=error,proto3" json:"error,omitempty"`
	HypervisorSpecific []byte                   `protobuf:"bytes,8,opt,name=hypervisor_specific,json=hypervisorSpecific,proto3" json:"hypervisor_specific,omitempty"`
	Restarts           uint32                   `protobuf:"varint,9,opt,name=restarts,proto3" json:"restarts,omitempty"`
}

func (x *FDURecord) Reset() {
	*x = FDURecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdu_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDURecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDURecord) ProtoMessage() {}

func (x *FDURecord) ProtoReflect() protoreflect.Message {
	mi := &file_fdu_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDURecord.ProtoReflect.Descriptor instead.
func (*FDURecord) Descriptor() ([]byte, []int) {
	return file_fdu_proto_rawDescGZIP(), []int{16}
}

func (x *FDURecord) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *FDURecord) GetFduUuid() string {
	if x != nil {
		return x.FduUuid
	}
	return ""
}

func (x *FDURecord) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *FDURecord) GetInterfaces() []*InterfaceRecord {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

func (x *FDURecord) GetConencitonPoints() []*ConnectionPointRecord {
	if x != nil {
		return x.ConencitonPoints
	}
	return nil
}

func (x *FDURecord) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *FDURecord) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *FDURecord) GetHypervisorSpecific() []byte {
	if x != nil {
		return x.HypervisorSpecific
	}
	return nil
}

func (x *FDURecord) GetRestarts() uint32 {
	if x != nil {
		return x.Restarts
	}
	return 0
}

type DefineFDUReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok    *FDURecord `protobuf:"bytes,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Error string     `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *DefineFDUReply) Reset() {
	*x = DefineFDUReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdu_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefineFDUReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefineFDUReply) ProtoMessage() {}

func (x *DefineFDUReply) ProtoReflect() protoreflect.Message {
	mi := &file_fdu_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefineFDUReply.ProtoReflect.Descriptor instead.
func (*DefineFDUReply) Descriptor() ([]byte, []int) {
	return file_fdu_proto_rawDescGZIP(), []int{17}
}

func (x *DefineFDUReply) GetOk() *FDURecord {
	if x != nil {
		return x.Ok
	}
	return nil
}

func (x *DefineFDUReply) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type OnboardFDUReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok    *FDUDescriptor `protobuf:"bytes,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Error string         `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *OnboardFDUReply) Reset() {
	*x = OnboardFDUReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdu_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnboardFDUReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnboardFDUReply) ProtoMessage() {}

func (x *OnboardFDUReply) ProtoReflect() protoreflect.Message {
	mi := &file_fdu_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnboardFDUReply.ProtoReflect.Descriptor instead.
func (*OnboardFDUReply) Descriptor() ([]byte, []int) {
	return file_fdu_proto_rawDescGZIP(), []int{18}
}

func (x *OnboardFDUReply) GetOk() *FDUDescriptor {
	if x != nil {
		return x.Ok
	}
	return nil
}

func (x *OnboardFDUReply) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

var File_fdu_proto protoreflect.FileDescriptor

var file_fdu_proto_rawDesc = []byte{
	0x0a, 0x09, 0x66, 0x64, 0x75, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x22,
	0x26, 0x0a, 0x10, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x46, 0x44, 0x55, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x5c, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x72, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x72,
	0x61, 0x64, 0x69, 0x75, 0x73, 0x22, 0x3f, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x69,
	0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06,
	0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x22, 0x5f, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x73, 0x73, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x73, 0x68, 0x4b, 0x65, 0x79, 0x73, 0x22, 0x75, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0xc5,
	0x02, 0x0a, 0x19, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08,
	0x63, 0x70, 0x75, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x70, 0x75, 0x41, 0x72, 0x63, 0x68, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x70, 0x75, 0x5f, 0x6d,
	0x69, 0x6e, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0f, 0x63, 0x70, 0x75, 0x4d, 0x69, 0x6e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x70, 0x75, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x70, 0x75, 0x4d,
	0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x67, 0x70, 0x75, 0x5f, 0x6d,
	0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x67, 0x70, 0x75, 0x4d, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x66,
	0x70, 0x67, 0x61, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x66, 0x70, 0x67, 0x61, 0x4d, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x1e, 0x0a, 0x0b,
	0x72, 0x61, 0x6d, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x6d, 0x62, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x72, 0x61, 0x6d, 0x53, 0x69, 0x7a, 0x65, 0x4d, 0x62, 0x12, 0x28, 0x0a, 0x10,
	0x73, 0x74, 0x72, 0x6f, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x6d, 0x62,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x74, 0x72, 0x6f, 0x67, 0x61, 0x74, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x4d, 0x62, 0x22, 0x71, 0x0a, 0x18, 0x47, 0x65, 0x6f, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x28, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x09,
	0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x69, 0x74, 0x79, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x69, 0x74, 0x79, 0x22, 0x63, 0x0a, 0x10, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x76, 0x69, 0x66, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x69, 0x66, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x22, 0x6c,
	0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x6c, 0x64, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x6c, 0x64, 0x52, 0x65, 0x66, 0x22, 0xac, 0x01, 0x0a,
	0x09, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x41, 0x0a, 0x11, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x70, 0x62, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x52, 0x10, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x63, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x70, 0x49, 0x64, 0x22, 0x5a, 0x0a, 0x11, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4b,
	0x69, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x92, 0x06, 0x0a, 0x0d, 0x46, 0x44, 0x55, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x66,
	0x64, 0x75, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x66, 0x64, 0x75, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e,
	0x0a, 0x0a, 0x68, 0x79, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x68, 0x79, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x12, 0x1f,
	0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x70, 0x62, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x2f, 0x0a, 0x13, 0x68, 0x79, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x68, 0x79,
	0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x12, 0x58, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x17, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x59, 0x0a, 0x19, 0x67, 0x65,
	0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x70, 0x62, 0x2e, 0x47, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x18, 0x67, 0x65, 0x6f,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x07, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x4a, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52,
	0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x12, 0x37, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x69,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x73, 0x5f, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x73, 0x4f, 0x6e, 0x22, 0x3b, 0x0a, 0x15,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x51, 0x0a, 0x16, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x69, 0x66, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x69, 0x66, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x22, 0xd9, 0x01, 0x0a,
	0x0f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d,
	0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x47, 0x0a, 0x11, 0x76, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x10, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x70, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x70, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x6e, 0x74, 0x66, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x69, 0x6e, 0x74, 0x66, 0x55, 0x75, 0x69, 0x64, 0x22, 0xc0, 0x01, 0x0a, 0x0d, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x13, 0x0a, 0x05, 0x63, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x70, 0x49, 0x64, 0x22, 0xc6, 0x02, 0x0a, 0x09,
	0x46, 0x44, 0x55, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x66, 0x64, 0x75, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x66, 0x64, 0x75, 0x55, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x33, 0x0a, 0x0a,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x12, 0x46, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x65, 0x6e, 0x63, 0x69, 0x74, 0x6f, 0x6e, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70,
	0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x65, 0x6e, 0x63, 0x69,
	0x74, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x13, 0x68, 0x79, 0x70, 0x65, 0x72,
	0x76, 0x69, 0x73, 0x6f, 0x72, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x68, 0x79, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x73, 0x22, 0x45, 0x0a, 0x0e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x46, 0x44,
	0x55, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x44, 0x55, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x4a, 0x0a, 0x0f, 0x4f,
	0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x46, 0x44, 0x55, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x21,
	0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e,
	0x46, 0x44, 0x55, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x02, 0x6f,
	0x6b, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x32, 0x75, 0x0a, 0x06, 0x46, 0x44, 0x55, 0x41, 0x70,
	0x69, 0x12, 0x34, 0x0a, 0x0a, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x46, 0x44, 0x55, 0x12,
	0x11, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x44, 0x55, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x1a, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x46,
	0x44, 0x55, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x35, 0x0a, 0x09, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x46, 0x44, 0x55, 0x12, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x46, 0x44, 0x55, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70, 0x62, 0x2e,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x46, 0x44, 0x55, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fdu_proto_rawDescOnce sync.Once
	file_fdu_proto_rawDescData = file_fdu_proto_rawDesc
)

func file_fdu_proto_rawDescGZIP() []byte {
	file_fdu_proto_rawDescOnce.Do(func() {
		file_fdu_proto_rawDescData = protoimpl.X.CompressGZIP(file_fdu_proto_rawDescData)
	})
	return file_fdu_proto_rawDescData
}

var file_fdu_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_fdu_proto_goTypes = []interface{}{
	(*DefineFDURequest)(nil),          // 0: pb.DefineFDURequest
	(*Position)(nil),                  // 1: pb.Position
	(*Proximity)(nil),                 // 2: pb.Proximity
	(*Configuration)(nil),             // 3: pb.Configuration
	(*Image)(nil),                     // 4: pb.Image
	(*ComputationalRequirements)(nil), // 5: pb.ComputationalRequirements
	(*GeographicalRequirements)(nil),  // 6: pb.GeographicalRequirements
	(*VirtualInterface)(nil),          // 7: pb.VirtualInterface
	(*ConnectionPointDescriptor)(nil), // 8: pb.ConnectionPointDescriptor
	(*Interface)(nil),                 // 9: pb.Interface
	(*StorageDescriptor)(nil),         // 10: pb.StorageDescriptor
	(*FDUDescriptor)(nil),             // 11: pb.FDUDescriptor
	(*ConnectionPointRecord)(nil),     // 12: pb.ConnectionPointRecord
	(*VirtualInterfaceRecord)(nil),    // 13: pb.VirtualInterfaceRecord
	(*InterfaceRecord)(nil),           // 14: pb.InterfaceRecord
	(*StorageRecord)(nil),             // 15: pb.StorageRecord
	(*FDURecord)(nil),                 // 16: pb.FDURecord
	(*DefineFDUReply)(nil),            // 17: pb.DefineFDUReply
	(*OnboardFDUReply)(nil),           // 18: pb.OnboardFDUReply
}
var file_fdu_proto_depIdxs = []int32{
	1,  // 0: pb.GeographicalRequirements.position:type_name -> pb.Position
	2,  // 1: pb.GeographicalRequirements.proximity:type_name -> pb.Proximity
	7,  // 2: pb.Interface.virtual_interface:type_name -> pb.VirtualInterface
	4,  // 3: pb.FDUDescriptor.image:type_name -> pb.Image
	5,  // 4: pb.FDUDescriptor.computation_requirements:type_name -> pb.ComputationalRequirements
	6,  // 5: pb.FDUDescriptor.geographical_requirements:type_name -> pb.GeographicalRequirements
	9,  // 6: pb.FDUDescriptor.interfaces:type_name -> pb.Interface
	10, // 7: pb.FDUDescriptor.storage:type_name -> pb.StorageDescriptor
	8,  // 8: pb.FDUDescriptor.connection_points:type_name -> pb.ConnectionPointDescriptor
	3,  // 9: pb.FDUDescriptor.configuration:type_name -> pb.Configuration
	13, // 10: pb.InterfaceRecord.virtual_interface:type_name -> pb.VirtualInterfaceRecord
	14, // 11: pb.FDURecord.interfaces:type_name -> pb.InterfaceRecord
	12, // 12: pb.FDURecord.conenciton_points:type_name -> pb.ConnectionPointRecord
	16, // 13: pb.DefineFDUReply.ok:type_name -> pb.FDURecord
	11, // 14: pb.OnboardFDUReply.ok:type_name -> pb.FDUDescriptor
	11, // 15: pb.FDUApi.OnboardFDU:input_type -> pb.FDUDescriptor
	0,  // 16: pb.FDUApi.DefineFDU:input_type -> pb.DefineFDURequest
	18, // 17: pb.FDUApi.OnboardFDU:output_type -> pb.OnboardFDUReply
	17, // 18: pb.FDUApi.DefineFDU:output_type -> pb.DefineFDUReply
	17, // [17:19] is the sub-list for method output_type
	15, // [15:17] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_fdu_proto_init() }
func file_fdu_proto_init() {
	if File_fdu_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_fdu_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefineFDURequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdu_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdu_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Proximity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdu_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Configuration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdu_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdu_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComputationalRequirements); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdu_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeographicalRequirements); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdu_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualInterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdu_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionPointDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdu_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdu_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdu_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDUDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdu_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionPointRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdu_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualInterfaceRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdu_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdu_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdu_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDURecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdu_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefineFDUReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdu_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnboardFDUReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fdu_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_fdu_proto_goTypes,
		DependencyIndexes: file_fdu_proto_depIdxs,
		MessageInfos:      file_fdu_proto_msgTypes,
	}.Build()
	File_fdu_proto = out.File
	file_fdu_proto_rawDesc = nil
	file_fdu_proto_goTypes = nil
	file_fdu_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FDUApiClient is the client API for FDUApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FDUApiClient interface {
	OnboardFDU(ctx context.Context, in *FDUDescriptor, opts ...grpc.CallOption) (*OnboardFDUReply, error)
	DefineFDU(ctx context.Context, in *DefineFDURequest, opts ...grpc.CallOption) (*DefineFDUReply, error)
}

type fDUApiClient struct {
	cc grpc.ClientConnInterface
}

func NewFDUApiClient(cc grpc.ClientConnInterface) FDUApiClient {
	return &fDUApiClient{cc}
}

func (c *fDUApiClient) OnboardFDU(ctx context.Context, in *FDUDescriptor, opts ...grpc.CallOption) (*OnboardFDUReply, error) {
	out := new(OnboardFDUReply)
	err := c.cc.Invoke(ctx, "/pb.FDUApi/OnboardFDU", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fDUApiClient) DefineFDU(ctx context.Context, in *DefineFDURequest, opts ...grpc.CallOption) (*DefineFDUReply, error) {
	out := new(DefineFDUReply)
	err := c.cc.Invoke(ctx, "/pb.FDUApi/DefineFDU", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FDUApiServer is the server API for FDUApi service.
type FDUApiServer interface {
	OnboardFDU(context.Context, *FDUDescriptor) (*OnboardFDUReply, error)
	DefineFDU(context.Context, *DefineFDURequest) (*DefineFDUReply, error)
}

// UnimplementedFDUApiServer can be embedded to have forward compatible implementations.
type UnimplementedFDUApiServer struct {
}

func (*UnimplementedFDUApiServer) OnboardFDU(context.Context, *FDUDescriptor) (*OnboardFDUReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnboardFDU not implemented")
}
func (*UnimplementedFDUApiServer) DefineFDU(context.Context, *DefineFDURequest) (*DefineFDUReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DefineFDU not implemented")
}

func RegisterFDUApiServer(s *grpc.Server, srv FDUApiServer) {
	s.RegisterService(&_FDUApi_serviceDesc, srv)
}

func _FDUApi_OnboardFDU_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FDUDescriptor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FDUApiServer).OnboardFDU(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FDUApi/OnboardFDU",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FDUApiServer).OnboardFDU(ctx, req.(*FDUDescriptor))
	}
	return interceptor(ctx, in, info, handler)
}

func _FDUApi_DefineFDU_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefineFDURequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FDUApiServer).DefineFDU(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FDUApi/DefineFDU",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FDUApiServer).DefineFDU(ctx, req.(*DefineFDURequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FDUApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.FDUApi",
	HandlerType: (*FDUApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnboardFDU",
			Handler:    _FDUApi_OnboardFDU_Handler,
		},
		{
			MethodName: "DefineFDU",
			Handler:    _FDUApi_DefineFDU_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fdu.proto",
}
